// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

  static Array twoToThe;
  static int p, q;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      /* var int p,q; */
      let p = 0;
      let q = 1;
      while (p < 16){
        let twoToThe[p] = q;
        let p = p + 1;
        let q = q + q;
      }
      return;
    }

    function boolean bit(int x, int j){
      return ~((x & twoToThe[j]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0){
        return -x;
      }else{
        return x;
      }
      /* return Math.sqrt(Math.multiply(x, x)); */
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
      var int i, sum, shitedX;
      let i = 0;
      let sum = 0;
      let shitedX = x;
      while (i < 16){
        if (Math.bit(y, i)){
          let sum = sum + shitedX;
        }
        let shitedX = shitedX + shitedX;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
      var int q, abs_x, abs_y;
      let abs_x = Math.abs(x);
      let abs_y = Math.abs(y);
      if (abs_y > abs_x){
        return 0;
      }
      let q = Math.abs(Math.divide(abs_x, 2 * abs_y));
      if(abs_x - (2 * q * abs_y) < abs_y){
        if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))){
          return 2 * Math.abs(q);
        }else{
          return 2 * (-Math.abs(q));
        }
      }else{
        if(((x > 0) & (y > 0)) | ((x < 0) & (y < 0))){
          return 2 * q + 1;
        }else{
          return -(2 * Math.abs(q) + 1);
        }
      }
      /* if (y > x){ */
      /*   return 0; */
      /* } */
      /* let q = Math.divide(x, 2 * y); */
      /* if(x - (2 * q * y) < y){ */
      /*   return 2 * q; */
      /* }else{ */
      /*   return 2 * q + 1; */
      /* } */
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, n, i, j, k, exponent_of_2;
      let y = 0;
      let n = 16;
      let i = 0;
      /* while(~((n/2 - 1 - i) < 0)){ */
      while((n/2 - 1 - i) > -1){
        let j = n / 2 - 1 - i;
        let exponent_of_2 = 1;
        let k = 0;
        while((j - k) > 0){
          let exponent_of_2 = exponent_of_2 * 2;
          let k = k + 1;
        }
        if (~(((y + exponent_of_2) * (y + exponent_of_2)) > x) & (((y + exponent_of_2) * (y + exponent_of_2)) > 0)){
          let y = y + exponent_of_2;
        }
        let i = i + 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b){
        return a;
      }else{
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b){
        return a;
      }else{
        return b;
      }
    }
}
