// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in = load, out = NotLoad);
    Or(a = load, b = NotLoad, out = One);
//    Register(in = outAll, load = One, out = Base4Inc, out = Base4Load, out = Base4Load1, out = Base4Load2);

    Inc16(in = Base4Inc, out = outInc1, out = outInc2);

    Mux16(a = Base4Load, b = in, sel = load, out = outLoad1, out = outLoad2, out = outLoad3);

    Not16( in = Base4Load1, out = notBase4Load1);
    And16( a = Base4Load2, b = notBase4Load1, out = outReset1, out = outReset2, out = outReset3, out = outReset4);

    Mux8Way16(a = outLoad1, b = outInc1, c = outLoad2, d = outLoad3, e = outReset1, f = outReset2, g = outReset3, h = outReset4, sel[2] = reset, sel[1] = load, sel[0] = inc, out = outAll);
    Register(in = outAll, load = One, out = Base4Inc, out = Base4Load, out = Base4Load1, out = Base4Load2, out = out);

}

