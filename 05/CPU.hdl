// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a = instruction[15], b = instruction[15], out = iBit);
    Not(in = iBit, out = notIBit);
    And(a = instruction[12], b = instruction[12], out = aBit);
    And(a = instruction[11], b = instruction[11], out = c1Bit);
    And(a = instruction[10], b = instruction[10], out = c2Bit);
    And(a = instruction[9], b = instruction[9], out = c3Bit);
    And(a = instruction[8], b = instruction[8], out = c4Bit);
    And(a = instruction[7], b = instruction[7], out = c5Bit);
    And(a = instruction[6], b = instruction[6], out = c6Bit);
    And(a = instruction[15], b = instruction[5], out = d1Bit);
    And(a = instruction[15], b = instruction[4], out = d2Bit);
    And(a = instruction[15], b = instruction[3], out = writeM, out = writeMBit);
    And(a = instruction[2], b = instruction[2], out = j1Bit);
    And(a = instruction[1], b = instruction[1], out = j2Bit);
    And(a = instruction[0], b = instruction[0], out = j3Bit);

    Or(a = iBit, b = notIBit, out = one);
    Not16(in = instruction, out = notInstruction);
    And16(a = instruction, b = notInstruction, out = AllZero);

    And(a = instruction[15], b = instruction[5], out = areg);
    Or(a = notIBit, b = areg, out = AregBit);

    Mux16(a = instruction, b = outALU, sel = iBit, out = outMux1);
    ARegister(in = outMux1, load = AregBit, out = outARegister, out[0..14] = addressM);
    Mux16(a = outARegister, b = inM, sel = aBit, out = outMux2);
    ALU(x =outDRegister, y = outMux2, zx = c1Bit, nx = c2Bit, zy = c3Bit, ny = c4Bit, f = c5Bit, no = c6Bit, out = outALU, zr = outZr, ng = outNg); 
    Mux16(a = AllZero, b = outALU, sel = writeMBit, out = outM);
    DRegister(in = outALU, load = d2Bit, out = outDRegister);
    Xor(a = outZr, b = outNg, out = NegPs);
    Not(in = NegPs, out = outPs);
    And(a = outNg, b = j1Bit, out = NgBit);
    And(a = outZr, b = j2Bit, out = ZrBit);
    And(a = outPs, b = j3Bit, out = PsBit); 
    Or(a = NgBit, b = ZrBit, out = NgOrZr);
    Or(a = NgOrZr, b = PsBit, out = NgOrZrOrPs);
    Mux(a = iBit, b = NgOrZrOrPs, sel = iBit, out = jumpBit);
    PC(in = outARegister, load = jumpBit, inc = one, reset = reset, out[0..14] = pc);
}
